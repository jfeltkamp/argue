<?php

use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_theme().
 */
function argue_base_theme() {
  return [
    'argument_edit_form' => [
      'render element' => 'form',
    ],
  ];
}

function argue_base_preprocess_page(&$variables) {
  // Set title for MDC TopBar
  if (!isset($variables['title']) && isset($variables['page']['#title'])) {
    $variables['title'] = $variables['page']['#title'];
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter()
 *
 * Changes vertical tabs to container.
 */
function argue_base_form_argument_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  // Use node display to keep it simple.
  $form['#theme'] = ['argument_edit_form'];
  $form['#attached']['library'][] = 'seven/node-form';

  $form['header'] = [
    '#type' => 'container',
    '#weight' => 10,
    '#attributes' => ['class' => ['argue_header']],
    '#tree' => TRUE,
    '#access' => TRUE,
    'reference' => $form['reference'],
    'title' => $form['title'],
  ];
  unset($form['reference']);
  unset($form['title']);

  $form['header']['reference']['#group'] = 'header';
  $form['header']['title']['#group'] = 'header';

  $form['meta'] = [
    '#type' => 'container',
    '#group' => 'advanced',
    '#weight' => -10,
    '#title' => t('Published'),
    '#attributes' => ['class' => ['entity-meta__header']],
    '#tree' => TRUE,
    '#access' => TRUE,
    'title' => [
      '#type' => 'container',
      'title' => [
        '#markup' => new TranslatableMarkup('Header data'),
      ],
      '#attributes' => [
        'class' => ['entity-meta__title'],
      ]
    ],
  ];

  $form['advanced']['#type'] = 'container';
  $form['advanced']['#attributes']['class'][] = 'entity-meta';

  $form['revision_information']['#type'] = 'container';
  $form['revision_information']['#group'] = 'meta';

}

/**
 * material
 *
 */
function argue_base_preprocess_form_element(&$variables) {
  $variables['attributes']['class'] = isset($variables['attributes']['class'])
    ? $variables['attributes']['class']
    : [];
  switch ($variables['type']) {
    case 'textfield':
    case 'password':
    case 'email':
    case 'textarea':
    case 'entity_autocomplete':
      $variables['attributes']['class'][] = 'mdc-text-field';

      if (in_array($variables['type'], ['textarea'])) {
        $variables['attributes']['class'][] = 'mdc-text-field--textarea';
      } else {
        $variables['ripple'] = TRUE;
      }

      // DESCRIPTION handling
      if (
        isset($variables['description']['attributes'])
        && $variables['description']['attributes'] instanceof \Drupal\Core\Template\Attribute
      ) {
        $variables['description']['attributes']->addClass('mdc-text-field-helper-text');
      } elseif (
        isset($variables['errors'])
        && $variables['errors'] !== NULL
      ) {
        $variables['description']['attributes'] = new \Drupal\Core\Template\Attribute(['class' => ['mdc-text-field-helper-text']]);
        $variables['description']['attributes']->addClass('mdc-text-field-helper-text--validation-msg');
      }

      // ERROR handling
      if (isset($variables['errors']) && $variables['errors']) {
        $variables['attributes']['class'][] = 'mdc-text-field--invalid';
      }

      // DISABLED handling
      if (isset($variables['disabled']) && $variables['disabled']) {
        $variables['attributes']['class'][] = 'mdc-text-field--disabled';
      }

      // LABEL handling
      $variables['label_display'] = 'mdc-floating-label';
    $variables['title'] = isset($variables['element']['#title']) ? $variables['element']['#title'] : '';
      break;
    case 'select':
      $variables['attributes']['class'][] = 'mdc-select';
      $variables['ripple'] = TRUE;
      $variables['label_display'] = 'mdc-floating-label';
      $variables['title'] = isset($variables['element']['#title']) ? $variables['element']['#title'] : '';
      break;
    case 'checkbox':
    case 'radio':
      $variables['attributes']['class'][] = 'mdc-form-field';
      $variables['label_display'] = 'none';
      break;
    default:
  }


}

function argue_base_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#type']) && $variables['element']['#type']) {
    $suggestions[] = 'form_element__' . $variables['element']['#type'];
  }
}

/**
 * material
 *
 */
function argue_base_preprocess_input(&$variables) {
  $variables['attributes']['class'] = isset($variables['attributes']['class'])
    ? $variables['attributes']['class']
    : [];
  switch ($variables['attributes']['type']) {
    case 'text':
    case 'password':
    case 'email':
    case 'number':
      $variables['attributes']['class'][] = 'mdc-text-field__input';
      break;
    case 'checkbox':
    case 'radio':
      $variables['title'] = (isset($variables['element']['#title']))
        ? $variables['element']['#title']
        : '';
      break;
    case 'submit':
      $variables['attributes']['class'][] = 'mdc-button mdc-button--raised mdc-ripple-upgraded';
      $variables['mdc_label'] = $variables['attributes']['value'];
      $variables['mdc_icon'] = NULL;
      break;
    default:
  }
}

function argue_base_preprocess_select(&$variables) {
  $variables['attributes']['class'][] = 'mdc-select__native-control';
}


function argue_base_preprocess_menu_local_task(&$variables, $hooks) {
  if(!isset($variables['link']['#options']['attributes'])) {
    $variables['link']['#options']['attributes'] = ['class' => []];
  }
  if(!isset($variables['link']['#options']['attributes']['class'])) {
    $variables['link']['#options']['attributes']['class'] = [];
  }
  $variables['link']['#options']['attributes']['class'][] = 'mdc-list-item';
  if(isset($variables['is_active']) && $variables['is_active']) {
    $variables['link']['#options']['attributes']['class'][] = 'mdc-list-item--selected';
  }
}

function argue_base_preprocess_links(&$variables) {
  if ($variables['theme_hook_original'] == 'links__toolbar_user') {
    $variables['attributes']['class'] = (isset($variables['attributes']['class']))
      ? $variables['attributes']['class']
      : [];
    $variables['attributes']['class'][] = 'mdc-list';
    foreach ($variables['links'] as $name => &$config) {
      $icon = '';
      switch($name) {
        case 'account':
          $icon = 'drafts';
          break;
        case 'account_edit':
          $icon = 'description';
          break;
        case 'logout':
          $icon = 'view_compact';
          break;
        default:
      }
      $config['link']['#title'] = [
        '#markup' => new TranslatableMarkup('<i class="material-icons mdc-list-item__graphic" aria-hidden="true">@icon</i><span class="mdc-list-item__text">@title</span>',[
          '@icon' => $icon,
          '@title' => ($config['link']['#title']) ?: ''
        ])
      ];
      $config['link']['#options']['attributes']['class'] = ['mdc-list-item'];

    }

  }
}

/**
 * @implements theme_preprocess_preprocess_argument__teaser()
 *
 * Set undo Link as MDC icon-button.
 */
function argue_base_preprocess_argument(&$variables) {
  /** @var \Drupal\argue_proscons\Entity\Argument $argument */
  $argument = $variables['content']['#argument'];
  if($argument->getType() == "1") {
    $variables['header_icon'] = 'thumb_up';
    $variables['attributes']['class'][] = 'argument__pro';
  } elseif ($argument->getType() == "2") {
    $variables['header_icon'] = 'thumb_down';
    $variables['attributes']['class'][] = 'argument__con';
  }
}

/**
 * @implements theme_preprocess_rate_template_number_up_down()
 *
 * Set undo link as MDC icon-button.
 */
function argue_base_preprocess_rate_template_number_up_down(&$variables) {
  if ($variables['undo'] instanceof \Drupal\Core\Link) {
    $url_opts = $variables['undo']->getUrl()->getOptions();
    if (isset($url_opts['attributes']['class']) && is_string($url_opts['attributes']['class'])) {
      $url_opts['attributes']['class'] = explode(' ', $url_opts['attributes']['class']);
    }
    $url_opts['attributes']['class'][] = 'material-icons mdc-icon-button';

    $variables['undo']->setText('undo');
    $variables['undo']->setUrl($variables['undo']->getUrl()->setOptions($url_opts));
  }
}

/**
 * @implements theme_preprocess_links()
 *
 * Set context links as MDC button.
 */
function argue_base_preprocess_links__dropbutton__operations(&$variables) {
  $attributes = ['attributes' => ['class' => ['mdc-button', 'mdc-card__action', 'mdc-card__action--button']]];
  foreach ($variables['links'] as &$link) {
    $link['link']['#url']->setOptions($attributes);
  }
}