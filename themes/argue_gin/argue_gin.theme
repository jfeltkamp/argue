<?php

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function argue_gin_theme() {
  return [
    'argument_edit_form' => [
      'render element' => 'form',
    ],
    'comment_form' => [
      'render element' => 'form',
    ],
    'card' => [
      'variables' => [
        'attributes' => NULL,
        'icon' => NULL,
        'title' => NULL,
        'subtitle' => NULL,
        'content' => NULL,
        'footer_left' => [],
        'footer_right' => []
      ]
    ],
    'argue_chip_set' => [
      'render element' => 'children',
    ],
    'argue_chip' => [
      'variables' => [
        'attributes' => NULL,
        'icon_before' => NULL,
        'text' => '',
        'icon_after' => NULL,
      ],
    ],
  ];
}

/**
 * Implemented hook_preprocess_links().
 */
function argue_gin_preprocess_links(&$variables) {
  // Styling classes for entity links.
  $in_group = ['links__node'];
  if (in_array($variables["theme_hook_original"], $in_group)) {
    // Add class to wrapper.
    $variables["attributes"]["class"] = ['links', 'button--group'];

    // Add button classes to links.
    foreach ($variables['links'] as $key => &$link) {
      if($link['link']['#url'] instanceof \Drupal\Core\Url) {
        $link['link']['#url']->setOption('attributes', [
          'class' => [
            'button',
            'button--extrasmall'
          ]
        ]);
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_field_alter()
 *
 * Add theme hook specified by formatter id.
 */
function argue_gin_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#formatter'])) {
    $suggestions[] = 'field__' . $variables['element']['#formatter'];
    $suggestions[] = 'field__' . $variables['element']['#entity_type'] . '__' . $variables['element']['#formatter'];
    $suggestions[] = 'field__' . $variables['element']['#entity_type'] . '__' . $variables['element']['#bundle'] . '__' . $variables['element']['#formatter'];
    $suggestions[] = 'field__' . $variables['element']['#entity_type'] . '__' . $variables['element']['#bundle'] . '__' . $variables['element']['#field_name'] . '__' . $variables['element']['#formatter'];
  }
}

/**
 * @implements theme_theme_suggestions_HOOK_alter()
 *
 * Add templates for view modes.
 */
function argue_gin_theme_suggestions_user_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['#view_mode'])) {
    $suggestions[] = 'user__' . $variables['elements']['#view_mode'];
  }
}


/**
 * @implements theme_preprocess_user()
 *
 * Set users roles to display.
 */
function argue_gin_preprocess_user(&$variables) {
  $roles = user_roles(TRUE);
  $user_roles = [];
  /** @var \Drupal\user\UserInterface $user */
  $user = $variables['user'];
  foreach ($user->get('roles') as $value) {
    $role_name = $value->getString();
    if (isset($roles[$role_name])) {
      $user_roles[] = $roles[$role_name]->label();
    }
  }

  $variables['content']['name'] = ['#markup' => $user->getAccountName()];
  $variables['content']['roles'] = ['#markup' => implode(', ', $user_roles)];
}


/**
 * Implements hook_form_BASE_FORM_ID_alter()
 *
 * Changes vertical tabs to container.
 */
function argue_gin_form_argument_form_alter(&$form, FormStateInterface $form_state) {
  $icon = 'argue_pro_con';
  if ($storage = $form_state->getStorage()) {
    if (isset($storage['form_display'])) {
      /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay $form_display */
      $form_display = $storage['form_display'];
      $form_mode = $form_display->get('mode');
      switch($form_display->get('mode')) {
        case 'edit_pro':
          $icon = 'argue_pro';
          break;
        case 'edit_con':
          $icon = 'argue_con';
          break;
        default:
          $icon = 'argue_pro_con';
      }
    }
  }
  // Use node display to keep it simple.
  $form['#theme'] = ['argument_edit_form'];
  $form['icon'] = ['#markup' => $icon];

  $form['header'] = [
    '#type' => 'container',
    '#weight' => 10,
    '#attributes' => ['class' => ['argue_header']],
    '#tree' => TRUE,
    '#access' => TRUE,
    'reference' => $form['reference'],
  ];
  unset($form['reference']);
  # unset($form['title']);

  $form['header']['reference']['#group'] = 'header';
  $form['header']['title']['#group'] = 'header';

  $form['meta'] = [
    '#type' => 'container',
    '#group' => 'advanced',
    '#weight' => -10,
    '#title' => t('Published'),
    '#attributes' => ['class' => ['entity-meta__header']],
    '#tree' => TRUE,
    '#access' => TRUE,
    'title' => [
      '#type' => 'container',
      'title' => [
        '#markup' => t('Header data'),
      ],
      '#attributes' => [
        'class' => ['entity-meta__title'],
      ]
    ],
  ];

  $form['advanced']['#type'] = 'container';
  $form['advanced']['#attributes']['class'][] = 'entity-meta';

  $form['revision_information']['#type'] = 'container';
  $form['revision_information']['#group'] = 'meta';

}


function argue_gin_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $icon = 'default';
  if ($storage = $form_state->getStorage()) {
    if (isset($storage['form_display'])) {
      /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay $form_display */
      $form_display = $storage['form_display'];
      $icon = $form_display->get('bundle');
      $form['icon'] = ['#markup' => $icon];

      // Set card header label.
      if (isset($form['#title'])) {
        $title = $form['#title'];
      } else {
        $label = \Drupal::entityTypeManager()
          ->getStorage('node_type')
          ->load($icon)
          ->label();
        $title = t('Add new @type', ['@type' => $label]);
      }
      $form['label'] = ['#markup' => $title];
    }
  }
}

/**
 * @implements hook_form_alter()
 *
 * Place form actions in the card footer (where not themeable).
 */
function argue_gin_preprocess_comment_form(&$vars) {
  // Set label above comment form
  if (isset($vars['form']['#title'])) {
    $vars['form']['label'] = ['#markup' => $vars['form']['#title']];
  } else {
    $vars['form']['label'] = ['#markup' => t('Add a comment')];
  }

  /*
   * Try fix nasty behavior of extra page when edit, reply or preview comment.
   * See /template/comments-form.html.twig
   */
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name == 'comment.reply') {
    $vars['form']['#preview'] = true;
  }

  // Add small classes to form action-buttons.
  $action_btns = ['submit', 'preview'];
  foreach ($action_btns as $btnId) {
    if (isset($vars["form"]["actions"][$btnId])) {
      $btn = &$vars["form"]["actions"][$btnId];
      if (!isset($btn['#attributes']['class'])) {
        $btn['#attributes']['class'] = [];
      }
      $btn['#attributes']['class'][] = 'button--small';
    }
  }
}
